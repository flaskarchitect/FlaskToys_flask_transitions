#!/bin/bash

# Print instructions for the user
echo "This script will process a video file located in the current directory."
echo "Please ensure that the 'start.mp4' file exists in this directory before proceeding."
echo "Press ENTER to continue, or CTRL+C to cancel."
read

# Check if start.mp4 exists in the current directory
if [ ! -f "start.mp4" ]; then
  echo "Error: 'start.mp4' file not found in current directory."
  exit 1
fi

# Process the video file

ffmpeg -hide_banner -i "$(pwd)/start.mp4" -filter:v "minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=10'" -c:v libx264 -r 20 -pix_fmt yuv420p -c:a copy -y "$(pwd)/output2.mp4"  
echo "done 1"  

ffmpeg -hide_banner -i "$(pwd)/output2.mp4" -filter:v "setpts=7*PTS,minterpolate='fps=25:scd=none:me_mode=bidir:vsbmc=1:search_param=200'" -y "$(pwd)/final2.mp4"
echo "done 2"   
ffmpeg -hide_banner -i "$(pwd)/final2.mp4" -filter:v "setpts=7*PTS,minterpolate='fps=25:scd=none:me_mode=bidir:vsbmc=1:search_param=200'" -y "$(pwd)/final5.mp4"
echo "done 3"


directory="/home/jack/music/"

# Use find with -name to locate all .mp3 files in the directory
# This will generate a list of file paths separated by newlines
# The -L option is used to follow symbolic links
MUSIC=($(find -L "$directory" -type f -name "*.mp3"))

# Use echo to display the contents of the MUSIC array
echo "MUSIC: ${MUSIC[@]}"
echo "----------------------"

# Function to get a random number between 25 and 34
get_random_seconds() {
  echo $((RANDOM % 10 + 25))
}

# Function to get a random music file from the MUSIC array
get_random_music() {
  echo "${MUSIC[$((RANDOM % ${#MUSIC[@]}))]}"
}

get_random_seconds() {
  echo $((RANDOM % 10 + 25))
}

# Get random init seconds and music file
init=$(get_random_seconds)
music=$(get_random_music)


# Get the duration of the video
video_duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 -i "$(pwd)/final5.mp4" | awk -F. '{print $1}')
echo "VIDEO_DURATION ${video_duration}"
# Run ffmpeg command to fade the music in and let it play until the video ends
#ffmpeg -i final5.mp4 -ss "$init" -i "$music" -af "afade=in:st=0:d=4" -map 0:0 -map 1:0 -shortest -y "$(pwd)/Final_End_Long2.mp4"

ffmpeg -i final5.mp4 -ss "$init" -i "$music" -af "afade=in:st=0:d=4,afade=out:st=0:d=${video_duration}" -map 0:0 -map 1:0 -y "$(pwd)/Final_End_Long3.mp4"

set > variables.txt
echo "The process has finished."
