#!/home/jack/miniconda3/envs/cloned_base/bin/python
from moviepy.editor import VideoFileClip, clips_array, AudioFileClip
import glob
import uuid
import random
import os
import cv2
from PIL import Image
import numpy as np
import shutil
from sys import argv
# List of image files to convert to a video
def get_an_mp3():
    mp3s = random.choice(glob.glob("/home/jack/Desktop/LearnFlask_step-by-step/static/free_no_attribute_music/*.mp3"))

    return mp3s 
def makevideo(DIR):
        image_files = sorted(glob.glob(DIR+"*.jpg"))
        # Adjust the file pattern as needed
        # Shuffle the image files to mix them randomly
        random.shuffle(image_files)
        print(len(image_files))

        # Create a temporary directory to store the resized images
        temp_dir = 'temp/'
        os.makedirs(temp_dir, exist_ok=True)

        # Load and resize the images
        resized_images = []
        for image_file in image_files:
            im = Image.open(image_file)
            SIZE = im.size

            img = cv2.imread(image_file)
            img = cv2.resize(img, SIZE)  # Resize to the same size as the original image
            resized_images.append(img)

        # Create a video writer
        out_path = 'xxxxoutput.mp4'
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # You may need to change the codec depending on your system
        out = cv2.VideoWriter(out_path, fourcc, 30, SIZE)

        # Keep track of video duration
        video_duration = 0

        # Create the video with fading transitions
        for i in range(len(resized_images)):
            if video_duration >= 58:  # Limit video to 58 seconds
                break

            img1 = resized_images[i]
            img2 = resized_images[(i + 1) % len(resized_images)]  # Wrap around to the first image
            # changing the alpha step size will change the duration of the fade effect
            step_size = 5
            for alpha in range(0, 150):  # Gradually change alpha from 0 to 100 for fade effect
                alpha /= 150.0
                blended = cv2.addWeighted(img1, 1 - alpha, img2, alpha, 0)
                out.write(blended)
                video_duration += 1 / 30  # Assuming 30 FPS

        out.release()

        # Prepare an audio clip of the same duration (58 seconds)
        audio_clip = AudioFileClip(get_an_mp3())  # Replace with your audio file path
        audio_clip = audio_clip.subclip(0, 58)  # Limit audio to 58 seconds
        # Load the video clip
        video_clip = VideoFileClip(out_path)

        # Set the audio of the video clip
        video_clip = video_clip.set_audio(audio_clip)

        # Save the final video with music
        final_output_path = DIR+'final_output.mp4'
        uid = str(uuid.uuid4())  # Generate a unique ID using uuid
        des=DIR.replace("/","_")
        mp4_file = f"/home/jack/Desktop/HDD500/collections/vids/{des}{uid}.mp4"
      
        
        video_clip.write_videofile(final_output_path, codec='libx264')
        shutil.copyfile(final_output_path, mp4_file)
        return print(mp4_file)
if __name__=="__main__":
    DIR=argv[1]
    print (DIR)
    makevideo(DIR)
